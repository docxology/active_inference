# Active Inference Knowledge Environment - Cursor Rules
# Comprehensive Agent Development Guide & Standards

**"Active Inference for, with, by Generative AI"**

## 🎯 Project Mission & Architecture

### Core Mission
Build the most comprehensive, accessible, integrated platform for Active Inference understanding through collaborative intelligence between humans and AI. Follow principles of educational excellence, scientific rigor, practical implementation, and community building.

### Complete Directory Structure
```
active_inference/
├── 📖 knowledge/                     # Educational content & learning paths
│   ├── 🏗️ foundations/               # Core theoretical concepts (JSON format)
│   ├── 📐 mathematics/               # Mathematical formulations & derivations
│   ├── 💻 implementations/           # Code examples & tutorials
│   ├── 🌍 applications/              # Real-world use cases & domain content
│   ├── 🎯 learning_paths.json        # Structured learning tracks
│   ├── 📖 README.md                  # Knowledge system documentation
│   └── 🤖 AGENTS.md                  # Knowledge agent guidelines
│
├── 🔬 research/                      # Research tools & scientific methods
│   ├── 🧪 experiments/               # Reproducible research pipelines
│   │   ├── 📖 README.md              # Experiments documentation
│   │   └── 🤖 AGENTS.md              # Experiments agent guidelines
│   ├── 🧮 simulations/               # Multi-scale modeling & simulation
│   │   ├── 📖 README.md              # Simulations documentation
│   │   └── 🤖 AGENTS.md              # Simulations agent guidelines
│   ├── 📊 analysis/                  # Statistical & information-theoretic analysis
│   │   ├── 📖 README.md              # Analysis documentation
│   │   └── 🤖 AGENTS.md              # Analysis agent guidelines
│   ├── 🏆 benchmarks/                # Performance evaluation & comparison
│   │   ├── 📖 README.md              # Benchmarks documentation
│   │   └── 🤖 AGENTS.md              # Benchmarks agent guidelines
│   ├── 📋 data_management/           # Research data management
│   │   ├── 📖 README.md              # Data management documentation
│   │   └── 🤖 AGENTS.md              # Data management agent guidelines
│   ├── 🔧 model_development/         # Model development workflows
│   │   ├── 📖 README.md              # Model development documentation
│   │   └── 🤖 AGENTS.md              # Model development agent guidelines
│   ├── 📋 project_planning/          # Research project planning
│   │   ├── 📖 README.md              # Project planning documentation
│   │   └── 🤖 AGENTS.md              # Project planning agent guidelines
│   ├── 📄 reporting/                 # Research reporting and publication
│   │   ├── 📖 README.md              # Reporting documentation
│   │   └── 🤖 AGENTS.md              # Reporting agent guidelines
│   ├── 📖 README.md                  # Research framework documentation
│   └── 🤖 AGENTS.md                  # Research agent guidelines
│
├── 👁️ visualization/                # Interactive exploration & visualization (src only)
│   ├── 📈 diagrams/                  # Concept diagrams & visual explanations
│   ├── 📋 dashboards/                # Interactive exploration interfaces
│   ├── 🎬 animations/                # Educational animations & demonstrations
│   ├── ⚖️ comparative/               # Model comparison & analysis tools
│   ├── 📖 README.md                  # Visualization documentation
│   └── 🤖 AGENTS.md                  # Visualization agent guidelines
│
├── 🛠️ applications/                 # Practical applications & implementations
│   ├── 📋 templates/                 # Ready-to-use implementation templates
│   ├── 📚 case_studies/              # Real-world application examples
│   ├── 🔗 integrations/              # External system connectors & APIs
│   ├── 📖 best_practices/            # Architectural guidelines & patterns
│   ├── 🌍 domains/                   # Domain-specific applications
│   │   ├── 🤖 artificial_intelligence
│   │   ├── 🎓 education
│   │   ├── ⚙️ engineering
│   │   ├── 🧠 neuroscience
│   │   ├── 🧑‍🤝‍🧑 psychology
│   │   └── 🤖 robotics
│   ├── 📖 README.md                  # Applications documentation
│   └── 🤖 AGENTS.md                  # Applications agent guidelines
│
├── 🖥️ platform/                     # Platform infrastructure & services
│   ├── 🌐 serve.py                   # Main platform server
│   ├── 🧠 knowledge_graph/           # Semantic knowledge representation
│   ├── 🔍 search/                    # Intelligent search & retrieval
│   ├── 🤝 collaboration/             # Multi-user collaboration features
│   ├── 🚀 deployment/                # Deployment & scaling infrastructure
│   ├── 📖 README.md                  # Platform documentation
│   └── 🤖 AGENTS.md                  # Platform agent guidelines
│
├── 🧪 tests/                         # Comprehensive testing & validation
│   ├── 🧪 unit/                      # Unit tests for components (tests/unit/)
│   ├── 🔗 integration/               # Integration tests for systems (tests/integration/)
│   ├── 📚 knowledge/                 # Knowledge content validation (tests/knowledge/)
│   ├── ⚡ performance/               # Performance tests (tests/performance/)
│   ├── 🔒 security/                  # Security tests (tests/security/)
│   └── 📖 README.md                  # Testing documentation
│
├── 🛠️ tools/                        # Development & orchestration tools
│   ├── 📖 documentation/             # Documentation generation tools
│   │   └── 📖 README.md              # Documentation tools documentation
│   ├── 🎼 orchestrators/             # Thin orchestration components
│   │   └── 📖 README.md              # Orchestrators documentation
│   ├── 🧪 testing/                   # Testing frameworks & utilities
│   │   └── 📖 README.md              # Testing tools documentation
│   ├── 🔧 utilities/                 # Helper functions & development tools
│   │   └── 📖 README.md              # Utilities documentation
│   ├── 📖 README.md                  # Tools documentation
│   └── 🤖 AGENTS.md                  # Tools agent guidelines
│
├── 📦 src/                          # Source code packages
│   └── 🧠 active_inference/          # Main Python package
│       ├── 💻 applications/          # Application framework implementations
│       ├── 📚 knowledge/             # Knowledge management systems
│       ├── 🧠 llm/                   # Large Language Model integration
│       ├── 🖥️ platform/              # Platform service implementations
│       ├── 🔬 research/              # Research tool implementations
│       ├── 🛠️ tools/                 # Development tool implementations
│       ├── 👁️ visualization/         # Visualization system implementations
│       ├── 📖 README.md              # Source code documentation
│       ├── 🤖 AGENTS.md              # Source code agent guidelines
│       └── 📦 __init__.py            # Package initialization & public API
│
└── 📖 docs/                         # Comprehensive documentation
    ├── 🌐 _static/                   # Static documentation assets
    ├── 📋 _templates/                # Documentation templates
    ├── 🔌 api/                       # API reference documentation
    ├── 🛠️ applications/              # Applications documentation
    ├── 📚 knowledge/                 # Knowledge documentation
    ├── 🖥️ platform/                  # Platform documentation
    ├── 🔬 research/                  # Research documentation
    ├── 👁️ visualization/             # Visualization documentation
    ├── 📖 index.rst                  # Main documentation index
    └── 📖 conf.py                    # Sphinx configuration
```

### Package Architecture (`src/active_inference/`)
```
src/active_inference/
├── __init__.py              # Package initialization, version, exports
├── cli.py                   # Command-line interface entry point
├── knowledge/               # Knowledge management and learning systems
│   ├── __init__.py         # Knowledge package exports
│   ├── foundations.py      # Foundation concepts implementation
│   ├── mathematics.py      # Mathematical formulations
│   └── repository.py       # Knowledge repository management
├── research/                # Research tools and experimentation
│   ├── __init__.py         # Research package exports
│   ├── analysis.py         # Statistical analysis tools
│   ├── benchmarks.py       # Performance evaluation
│   ├── experiments.py      # Experiment management
│   └── simulations.py      # Multi-scale modeling
├── visualization/           # Interactive visualization systems
│   ├── __init__.py         # Visualization package exports
│   ├── animations/         # Animation implementations
│   ├── comparative/        # Comparison tools
│   ├── dashboards/         # Dashboard implementations
│   └── diagrams/           # Diagram generation
├── applications/            # Application frameworks
│   ├── __init__.py         # Applications package exports
│   ├── best_practices.py   # Best practice implementations
│   ├── case_studies.py     # Case study implementations
│   ├── integrations.py     # Integration implementations
│   └── templates.py        # Template systems
├── platform/                # Platform infrastructure
│   ├── __init__.py         # Platform package exports
│   ├── collaboration.py    # Collaboration features
│   ├── deployment.py       # Deployment management
│   ├── knowledge_graph.py  # Knowledge graph engine
│   └── search.py           # Search and retrieval
└── tools/                   # Development and utility tools
    ├── __init__.py         # Tools package exports
    ├── documentation/      # Documentation tools
    ├── orchestrators/      # Orchestration components
    ├── testing/            # Testing utilities
    └── utilities/          # General utilities
```

## 📋 Development Standards

### Test-Driven Development (TDD) Requirements
**MANDATORY**: All code development must follow TDD principles:

1. **Write Tests First**: Create comprehensive tests before implementation
2. **Red-Green-Refactor**: Follow the TDD cycle strictly
3. **Test Coverage**: Maintain >95% coverage for core components, >80% overall
4. **Edge Case Testing**: Test boundary conditions and error scenarios
5. **Integration Testing**: Test component interactions and data flow

**Test Structure Pattern**:
```python
import pytest
from typing import Dict, Any

class TestComponentPattern:
    """Pattern for comprehensive component testing"""

    @pytest.fixture
    def component_config(self) -> Dict[str, Any]:
        """Standard test configuration"""
        return {"test_mode": True, "debug": True}

    def test_component_initialization(self, component_config):
        """Test component initialization"""
        # Arrange
        expected_attributes = ["config", "logger", "initialized"]

        # Act
        component = self.create_component(component_config)

        # Assert
        for attr in expected_attributes:
            assert hasattr(component, attr)

    @pytest.mark.parametrize("invalid_config", [
        {}, {"missing_required": True}, {"invalid_type": 123}
    ])
    def test_invalid_configuration(self, invalid_config):
        """Test error handling for invalid configuration"""
        with pytest.raises((ValueError, TypeError)):
            self.create_component(invalid_config)
```

### Code Quality Standards

#### Type Safety (MANDATORY)
- Complete type annotations for all functions and methods
- Use `typing` module for complex types
- No `Any` types without explicit justification
- Generic types for collections and containers

**Pattern**:
```python
from typing import Dict, List, Optional, Any, TypeVar, Generic
from abc import ABC, abstractmethod

T = TypeVar('T')

class BaseRepository(Generic[T], ABC):
    """Generic repository pattern with type safety"""

    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.items: Dict[str, T] = {}

    @abstractmethod
    def create(self, item: T) -> str:
        """Create new item and return ID"""
        pass

    @abstractmethod
    def get(self, item_id: str) -> Optional[T]:
        """Retrieve item by ID"""
        pass

    @abstractmethod
    def update(self, item_id: str, item: T) -> bool:
        """Update existing item"""
        pass
```

#### Documentation Standards (MANDATORY)

**Docstring Format** (Google Style):
```python
def process_knowledge_node(node_id: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """
    Process a knowledge node through the complete pipeline.

    This function orchestrates the complete processing of a knowledge node,
    including validation, enrichment, indexing, and integration with the
    knowledge graph.

    Args:
        node_id: Unique identifier for the knowledge node
        config: Configuration dictionary with processing parameters

    Returns:
        Dictionary containing processing results and metadata

    Raises:
        ValueError: If node_id is invalid or node not found
        ProcessingError: If processing pipeline fails
        ValidationError: If node content fails validation

    Examples:
        >>> config = {"validate": True, "enrich": True, "index": True}
        >>> result = process_knowledge_node("entropy_basics", config)
        >>> print(result["status"])
        "completed"
    """
    pass
```

**README.md Structure** (MANDATORY for every component):
```markdown
# Component Name

Brief, clear description of what this component does.

## Overview

More detailed explanation of purpose, scope, and functionality.

## Architecture

How the component fits into the larger system.

## Usage

### Basic Usage
```python
# Code examples showing basic usage
```

### Advanced Usage
```python
# Advanced examples with configuration
```

## Configuration

Required and optional configuration parameters.

## API Reference

Complete API documentation with examples.

## Testing

How to test this component and what tests exist.

## Contributing

How to contribute to this component.
```

**AGENTS.md Structure** (MANDATORY for every component):
```markdown
# Component Agent Guide

Guidelines for AI agents working with this component.

## Role and Responsibilities

What agents should do when working with this component.

## Key Patterns

Important implementation patterns to follow.

## Common Tasks

Typical tasks agents will perform.

## Quality Standards

Specific quality requirements for this component.

## Integration Points

How this component connects to other components.
```

### Implementation Patterns

#### Factory Pattern (PREFERRED)
```python
def create_component(component_type: str, config: Dict[str, Any]) -> Any:
    """Create platform component using factory pattern"""

    component_factories = {
        'knowledge_repository': create_knowledge_repository,
        'research_framework': create_research_framework,
        'visualization_engine': create_visualization_engine,
        'application_framework': create_application_framework,
        'platform': initialize_platform
    }

    if component_type not in component_factories:
        raise ValueError(f"Unknown component type: {component_type}")

    return component_factories[component_type](config)
```

#### Service Pattern (PREFERRED)
```python
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
import logging

class BasePlatformService(ABC):
    """Base pattern for platform services"""

    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.service_name = self.__class__.__name__.lower()
        self.setup_logging()
        self.initialize_service()

    def setup_logging(self) -> None:
        """Configure service logging"""
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(f"platform.{self.service_name}")

    @abstractmethod
    def initialize_service(self) -> None:
        """Initialize service-specific components"""
        pass

    @abstractmethod
    def create_endpoints(self) -> None:
        """Create service API endpoints"""
        pass

    def health_check(self) -> Dict[str, Any]:
        """Service health check"""
        return {
            "service": self.service_name,
            "status": "healthy",
            "timestamp": self.get_timestamp()
        }
```

#### Configuration Pattern (MANDATORY)
```python
from dataclasses import dataclass
from typing import Optional

@dataclass
class ComponentConfig:
    """Configuration class for components"""
    name: str
    version: str = "1.0.0"
    debug: bool = False
    max_items: int = 1000
    timeout: float = 30.0
    database_url: Optional[str] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for serialization"""
        return {
            'name': self.name,
            'version': self.version,
            'debug': self.debug,
            'max_items': self.max_items,
            'timeout': self.timeout,
            'database_url': self.database_url
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ComponentConfig':
        """Create instance from dictionary"""
        return cls(**data)
```

## 📚 Knowledge Content Standards

### JSON Schema (MANDATORY)
Every knowledge JSON file must follow this exact schema:

```json
{
  "id": "unique_identifier",
  "title": "Human-readable title",
  "content_type": "foundation|mathematics|implementation|application",
  "difficulty": "beginner|intermediate|advanced|expert",
  "description": "Clear, concise description",
  "prerequisites": ["prerequisite_node_ids"],
  "tags": ["relevant", "tags", "for", "search"],
  "learning_objectives": ["measurable", "outcomes"],
  "content": {
    "overview": "High-level summary",
    "mathematical_definition": "Formal treatment",
    "examples": "Practical examples",
    "interactive_exercises": "Hands-on activities"
  },
  "metadata": {
    "estimated_reading_time": 15,
    "author": "Content creator",
    "last_updated": "2024-10-27",
    "version": "1.0"
  }
}
```

### Content Type Specifications

#### Foundation Content (`knowledge/foundations/`)
- **Purpose**: Core theoretical concepts
- **Structure**: Deep explanations with mathematical grounding
- **Examples**: Intuitive analogies and real-world applications
- **Exercises**: Thought experiments and conceptual questions

#### Mathematics Content (`knowledge/mathematics/`)
- **Purpose**: Rigorous mathematical formulations
- **Structure**: Step-by-step derivations and proofs
- **Examples**: Computational implementations and numerical validation
- **Exercises**: Mathematical problem solving and proof construction

#### Implementation Content (`knowledge/implementations/`)
- **Purpose**: Practical code examples and tutorials
- **Structure**: Complete, runnable code with explanations
- **Examples**: Multiple implementation approaches and optimization techniques
- **Exercises**: Code modification and extension tasks

#### Application Content (`knowledge/applications/`)
- **Purpose**: Real-world use cases and domain applications
- **Structure**: Case studies with practical implementation
- **Examples**: Industry applications and research implementations
- **Exercises**: Application design and customization tasks

### Learning Path Structure (`learning_paths.json`)
```json
{
  "id": "foundations_complete",
  "title": "Complete Foundations Track",
  "description": "Comprehensive learning path through all foundation concepts",
  "difficulty": "beginner_to_advanced",
  "estimated_hours": 40,
  "tracks": [
    {
      "id": "information_theory",
      "title": "Information Theory Basics",
      "nodes": ["entropy_basics", "kl_divergence", "mutual_information"],
      "estimated_hours": 8
    },
    {
      "id": "bayesian_methods",
      "title": "Bayesian Methods",
      "nodes": ["bayesian_inference", "graphical_models", "variational_methods"],
      "estimated_hours": 10
    }
  ]
}
```

## 🧪 Testing Standards

### Test Categories (MANDATORY)
1. **Unit Tests** (`tests/unit/`): Individual function and method testing
2. **Integration Tests** (`tests/integration/`): Component interaction validation
3. **Knowledge Tests** (`tests/knowledge/`): Content accuracy and completeness validation
4. **Performance Tests** (`tests/performance/`): Scalability and efficiency validation
5. **Security Tests** (`tests/security/`): Vulnerability and security assessment

### Test Coverage Requirements
- **Core Components**: >95% coverage
- **Overall Project**: >80% coverage
- **Critical Paths**: 100% coverage
- **Error Handling**: All error paths tested

### Test Organization
```
tests/
├── unit/
│   ├── test_knowledge_repository.py    # Knowledge system unit tests
│   ├── test_research_framework.py      # Research tools unit tests
│   ├── test_visualization_engine.py    # Visualization unit tests
│   ├── test_application_framework.py   # Applications unit tests
│   └── test_platform_services.py       # Platform unit tests
├── integration/
│   ├── test_knowledge_research_integration.py  # Cross-component integration
│   ├── test_platform_knowledge_integration.py  # Platform-knowledge integration
│   └── test_full_system_integration.py         # End-to-end integration
└── knowledge/
    ├── test_content_accuracy.py        # Content validation tests
    ├── test_prerequisite_chains.py     # Learning path validation
    └── test_mathematical_correctness.py # Mathematical validation
```

### Testing Commands
```bash
# Run all tests
make test

# Run specific test types
make test-unit
make test-integration
make test-knowledge

# Check coverage
pytest tests/ --cov=src/ --cov-report=html

# Run tests with specific markers
pytest tests/ -m "unit and not slow"
pytest tests/ -m "integration"
pytest tests/ -m "knowledge"
```

## 📖 Documentation Standards

### Documentation Ecosystem
Every component must have comprehensive documentation:

1. **README.md**: Overview, usage, examples, API reference
2. **AGENTS.md**: Agent development guidelines and patterns
3. **tests/README.md**: Testing documentation and examples
4. **Inline Documentation**: Comprehensive docstrings and comments

### Component Documentation Templates
**Use these templates for consistent documentation:**

- **[README Template](tools/templates/component_README_template.md)**: Complete README.md structure
- **[AGENTS Template](tools/templates/component_AGENTS_template.md)**: Complete AGENTS.md structure

**Template Usage**:
```bash
# Copy templates for new components
cp tools/templates/component_README_template.md component_name/README.md
cp tools/templates/component_AGENTS_template.md component_name/AGENTS.md

# Customize templates with component-specific information
# Follow the structure and standards in templates
```

### Documentation Commands
```bash
# Generate all documentation
make docs

# Generate knowledge documentation
python tools/documentation/generate_knowledge_docs.py

# Serve documentation locally
make docs-serve

# Check documentation builds
sphinx-build docs/ docs/_build/
```

## 🛠️ Development Tools

### Makefile Commands
```bash
# Environment setup
make setup              # Set up development environment
make install-deps       # Install dependencies

# Quality assurance
make test              # Run all tests
make lint              # Run linting checks
make format            # Format code
make check-all         # Run all quality checks

# Documentation
make docs              # Generate documentation
make docs-serve        # Serve documentation locally

# Platform operations
make serve             # Start platform server
make clean             # Clean build artifacts
```

### Code Quality Tools
- **Black**: Code formatting and style enforcement
- **isort**: Import organization and sorting
- **flake8**: Code linting and style checking
- **mypy**: Type checking and validation
- **pre-commit**: Pre-commit hook management

### Development Workflow
1. **Create Feature Branch**: `git checkout -b feature/your-feature-name`
2. **Write Tests First**: Follow TDD with comprehensive test coverage
3. **Implement Feature**: Follow established patterns and standards
4. **Run Quality Checks**: `make check-all` must pass
5. **Update Documentation**: README.md, AGENTS.md, and API docs
6. **Submit PR**: Create pull request with detailed description

## 🤖 Agent Development Guidelines

### Agent Role Categories
1. **Knowledge Agents**: Educational content creation and learning systems
2. **Research Agents**: Scientific tools and experimental frameworks
3. **Visualization Agents**: Interactive exploration and visual explanations
4. **Application Agents**: Practical implementations and case studies
5. **Platform Agents**: Infrastructure and service development
6. **Tools Agents**: Development tools and automation systems

### Agent Development Process
1. **Task Assessment**: Analyze project needs and requirements
2. **Architecture Planning**: Design solutions following established patterns
3. **Test-Driven Development**: Write tests before implementation
4. **Implementation**: Follow coding standards and best practices
5. **Documentation**: Create comprehensive documentation
6. **Quality Assurance**: Ensure all tests pass and quality standards met
7. **Review Process**: Submit for community review and validation
8. **Integration**: Integrate with existing platform components

### Quality Assurance Checklist
- [ ] **Test-Driven Development**: Tests written before implementation
- [ ] **Comprehensive Testing**: Unit, integration, and performance tests
- [ ] **Code Documentation**: Complete docstrings and comments
- [ ] **Type Annotations**: Complete type hints for all interfaces
- [ ] **Code Review**: Peer review and feedback integration
- [ ] **Performance Validation**: Performance characteristics validated
- [ ] **Documentation**: README.md and AGENTS.md updated
- [ ] **Integration**: Component integration verified

## 🔄 Implementation Patterns

### Error Handling Pattern (MANDATORY)
```python
def execute_with_error_handling(operation: Callable, *args, **kwargs) -> Any:
    """Execute operation with comprehensive error handling"""

    try:
        # Log operation start
        logger.info(f"Starting operation: {operation.__name__}")

        # Execute operation
        result = operation(*args, **kwargs)

        # Log success
        logger.info(f"Operation completed successfully: {operation.__name__}")

        return result

    except ValidationError as e:
        logger.error(f"Validation error in {operation.__name__}: {e}")
        raise

    except ResourceError as e:
        logger.error(f"Resource error in {operation.__name__}: {e}")
        # Attempt recovery or provide user guidance
        raise

    except Exception as e:
        logger.error(f"Unexpected error in {operation.__name__}: {e}")
        # Log full traceback for debugging
        logger.debug(f"Full traceback: {traceback.format_exc()}")
        raise
```

### Logging Pattern (MANDATORY)
```python
import logging
from typing import Dict, Any

class ComponentWithLogging:
    """Component with comprehensive logging"""

    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.setup_logging()
        self.logger.info(f"Initializing {self.__class__.__name__}")

    def setup_logging(self) -> None:
        """Configure component logging"""
        self.logger = logging.getLogger(f"active_inference.{self.__class__.__name__.lower()}")

        # Set logging level based on configuration
        level = logging.DEBUG if self.config.get('debug', False) else logging.INFO
        self.logger.setLevel(level)

        # Add handler if not already present
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)

    def log_operation(self, operation: str, details: Dict[str, Any] = None) -> None:
        """Log operation with structured details"""
        log_data = {"operation": operation}
        if details:
            log_data.update(details)

        self.logger.info(f"Operation: {operation}", extra={"details": log_data})
```

### Configuration Validation Pattern (MANDATORY)
```python
from typing import Dict, Any, List
import json

def validate_configuration(config: Dict[str, Any], schema: Dict[str, Any]) -> List[str]:
    """Validate configuration against schema"""

    errors = []

    # Check required fields
    required_fields = schema.get('required', [])
    for field in required_fields:
        if field not in config:
            errors.append(f"Missing required field: {field}")

    # Check field types
    for field, expected_type in schema.get('properties', {}).items():
        if field in config:
            if not isinstance(config[field], expected_type):
                errors.append(f"Field {field} must be of type {expected_type.__name__}")

    # Check field constraints
    for field, constraints in schema.get('constraints', {}).items():
        if field in config:
            value = config[field]

            if 'min_value' in constraints and value < constraints['min_value']:
                errors.append(f"Field {field} must be >= {constraints['min_value']}")

            if 'max_value' in constraints and value > constraints['max_value']:
                errors.append(f"Field {field} must be <= {constraints['max_value']}")

            if 'allowed_values' in constraints and value not in constraints['allowed_values']:
                errors.append(f"Field {field} must be one of {constraints['allowed_values']}")

    return errors

def load_config_with_validation(config_path: str, schema: Dict[str, Any]) -> Dict[str, Any]:
    """Load configuration file with comprehensive validation"""

    try:
        with open(config_path, 'r') as f:
            config = json.load(f)

        errors = validate_configuration(config, schema)
        if errors:
            raise ValueError(f"Configuration validation failed: {'; '.join(errors)}")

        return config

    except FileNotFoundError:
        raise FileNotFoundError(f"Configuration file not found: {config_path}")
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON in configuration file: {e}")
```

## 🎯 Quality Standards

### Code Quality Gates
- **Test Coverage**: >95% for core components, >80% overall
- **Type Safety**: 100% type annotations, no `Any` without justification
- **Documentation Coverage**: 100% for public APIs and interfaces
- **Code Style**: PEP 8 compliance with automated formatting
- **Security**: Secure coding practices with vulnerability prevention
- **Performance**: Optimized algorithms and data structures

### Content Quality Gates
- **Educational Value**: Progressive disclosure and scaffolded learning
- **Technical Accuracy**: Peer-reviewed mathematical and conceptual content
- **Completeness**: Comprehensive coverage of Active Inference topics
- **Accessibility**: Multiple learning styles and accessibility support
- **Currency**: Updated with latest research and developments

### Platform Quality Gates
- **Reliability**: 99.9% uptime with comprehensive monitoring
- **Scalability**: Horizontal scaling for growing user base
- **Security**: Industry-standard security practices and compliance
- **Performance**: Sub-second response times for user interactions
- **Integration**: Seamless integration with scientific and educational tools

## 🚀 Getting Started as an Agent

### Development Environment Setup
```bash
# 1. Clone repository
git clone https://github.com/docxology/active_inference.git
cd active_inference

# 2. Set up environment
make setup

# 3. Run tests to verify setup
make test

# 4. Start development server
make serve

# 5. Generate documentation
make docs
```

### Agent Development Workflow
1. **Explore Codebase**: Review existing implementations and patterns
2. **Run Tests**: Ensure all tests pass before making changes
3. **Study Interfaces**: Understand the interfaces between components
4. **Add Logging**: Add appropriate logging for new functionality
5. **Write Tests**: Follow TDD with comprehensive test coverage
6. **Update Documentation**: Update README.md and AGENTS.md files
7. **Submit PR**: Create pull request with detailed description

### Common Agent Tasks
1. **Knowledge Content**: Create educational JSON content following schema
2. **Code Implementation**: Implement features following TDD and patterns
3. **Documentation**: Update README.md and AGENTS.md files
4. **Testing**: Add comprehensive tests for new functionality
5. **Integration**: Ensure components integrate properly
6. **Quality Assurance**: Verify all quality standards are met

## 📞 Support & Resources

### Key Documentation
- **[Main README.md](README.md)**: Project overview and navigation
- **[AGENTS.md](AGENTS.md)**: Master agent guidelines and workflows
- **[CONTRIBUTING.md](CONTRIBUTING.md)**: Contribution processes and standards
- **[Makefile](Makefile)**: Build system and development commands

### Component Documentation
- **[Knowledge System](knowledge/README.md)**: Educational content and learning
- **[Research Framework](research/README.md)**: Scientific tools and methods
- **[Applications](applications/README.md)**: Implementation and deployment
- **[Platform Services](platform/README.md)**: Infrastructure and APIs
- **[Visualization](visualization/README.md)**: Interactive exploration tools
- **[Testing](tests/README.md)**: Quality assurance and validation

### Development Resources
- **Test Suite**: Comprehensive testing framework with examples
- **Code Examples**: Working implementations in each component
- **API Documentation**: Complete API reference with usage examples
- **Community**: Global Active Inference community for support

---

**"Active Inference for, with, by Generative AI"** - Together, we're building the most comprehensive platform for understanding intelligence, cognition, and behavior through collaborative intelligence and comprehensive knowledge integration.

**Current Version**: 0.2.0 | **Development Status**: Active Development | **Last Updated**: October 2024
